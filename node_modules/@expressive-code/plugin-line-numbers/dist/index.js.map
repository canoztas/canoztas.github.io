{"version":3,"sources":["../src/index.ts","../src/styles.ts"],"sourcesContent":["import { ExpressiveCodePlugin } from '@expressive-code/core'\nimport { setInlineStyle, h } from '@expressive-code/core/hast'\nimport { lineNumbersStyleSettings, getLineNumbersBaseStyles } from './styles'\nexport { LineNumbersStyleSettings } from './styles'\n\nexport interface PluginLineNumbersProps {\n\t/**\n\t * Whether to show line numbers on the current code block.\n\t *\n\t * The default value of this prop can be changed using the `defaultProps` option\n\t * in your Expressive Code configuration. You can also change the default value by language\n\t * using `defaultProps.overridesByLang`.\n\t *\n\t * @default true\n\t */\n\tshowLineNumbers: boolean\n\t/**\n\t * The line number to start counting from.\n\t *\n\t * @default 1\n\t */\n\tstartLineNumber: number\n}\n\ndeclare module '@expressive-code/core' {\n\texport interface ExpressiveCodeBlockProps extends PluginLineNumbersProps {}\n}\n\nexport function pluginLineNumbers(): ExpressiveCodePlugin {\n\treturn {\n\t\tname: 'Line numbers',\n\t\tstyleSettings: lineNumbersStyleSettings,\n\t\tbaseStyles: (context) => getLineNumbersBaseStyles(context),\n\t\thooks: {\n\t\t\tpreprocessMetadata: ({ codeBlock: { metaOptions, props }, addGutterElement }) => {\n\t\t\t\t// Transfer meta options (if any) to props\n\t\t\t\tprops.showLineNumbers = metaOptions.getBoolean('showLineNumbers') ?? props.showLineNumbers\n\t\t\t\tprops.startLineNumber = metaOptions.getInteger('startLineNumber') ?? props.startLineNumber\n\t\t\t\t// Use props to determine if line numbers should be shown\n\t\t\t\tif (props.showLineNumbers !== false) {\n\t\t\t\t\taddGutterElement({\n\t\t\t\t\t\trenderPhase: 'earlier',\n\t\t\t\t\t\trenderLine: ({ codeBlock, lineIndex }) => {\n\t\t\t\t\t\t\treturn h('div.ln', { 'aria-hidden': 'true' }, `${lineIndex + (codeBlock.props.startLineNumber ?? 1)}`)\n\t\t\t\t\t\t},\n\t\t\t\t\t\trenderPlaceholder: () => h('div.ln'),\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t},\n\t\t\tpostprocessRenderedBlock: ({ codeBlock, renderData }) => {\n\t\t\t\t// If the line numbers column needs more width than the default 2 characters,\n\t\t\t\t// adjust it to fit the longest line number\n\t\t\t\tconst { startLineNumber = 1 } = codeBlock.props\n\t\t\t\tconst endLineNumber = startLineNumber + codeBlock.getLines().length - 1\n\t\t\t\tconst lnWidth = Math.max(startLineNumber.toString().length, endLineNumber.toString().length)\n\t\t\t\tif (lnWidth > 2) setInlineStyle(renderData.blockAst, '--lnWidth', `${lnWidth}ch`)\n\t\t\t},\n\t\t},\n\t}\n}\n","import { PluginStyleSettings, ResolverContext } from '@expressive-code/core'\n\nexport interface LineNumbersStyleSettings {\n\t/**\n\t * Allows overriding the foreground color to use for line numbers.\n\t *\n\t * By default, line numbers inherit the gutter foreground color defined by the\n\t * `gutterForeground` core style setting.\n\t *\n\t * @default 'inherit'\n\t */\n\tforeground: string\n\t/**\n\t * Allows overriding the foreground color to use for highlighted line numbers.\n\t *\n\t * By default, highlighted line numbers inherit the gutter highlighted foreground color\n\t * defined by the `gutterHighlightForeground` core style setting.\n\t *\n\t * @default 'inherit'\n\t */\n\thighlightForeground: string\n}\n\ndeclare module '@expressive-code/core' {\n\texport interface StyleSettings {\n\t\tlineNumbers: LineNumbersStyleSettings\n\t}\n}\n\nexport const lineNumbersStyleSettings = new PluginStyleSettings({\n\tdefaultValues: {\n\t\tlineNumbers: {\n\t\t\tforeground: 'inherit',\n\t\t\thighlightForeground: 'inherit',\n\t\t},\n\t},\n})\n\nexport function getLineNumbersBaseStyles({ cssVar }: ResolverContext) {\n\tconst result = `\n\t\t.gutter .ln {\n\t\t\tdisplay: inline-flex;\n\t\t\tjustify-content: flex-end;\n\t\t\talign-items: flex-start;\n\t\t\tbox-sizing: content-box;\n\t\t\tmin-width: var(--lnWidth, 2ch);\n\t\t\tpadding-inline: 2ch;\n\t\t\tcolor: ${cssVar('lineNumbers.foreground')};\n\t\t\t.highlight & {\n\t\t\t\tcolor: ${cssVar('lineNumbers.highlightForeground')};\n\t\t\t}\n\t\t}\n\t`\n\n\treturn result\n}\n"],"mappings":";AACA,SAAS,gBAAgB,SAAS;;;ACDlC,SAAS,2BAA4C;AA6B9C,IAAM,2BAA2B,IAAI,oBAAoB;AAAA,EAC/D,eAAe;AAAA,IACd,aAAa;AAAA,MACZ,YAAY;AAAA,MACZ,qBAAqB;AAAA,IACtB;AAAA,EACD;AACD,CAAC;AAEM,SAAS,yBAAyB,EAAE,OAAO,GAAoB;AACrE,QAAM,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAQJ,OAAO,wBAAwB,CAAC;AAAA;AAAA,aAE/B,OAAO,iCAAiC,CAAC;AAAA;AAAA;AAAA;AAKrD,SAAO;AACR;;;AD3BO,SAAS,oBAA0C;AACzD,SAAO;AAAA,IACN,MAAM;AAAA,IACN,eAAe;AAAA,IACf,YAAY,CAAC,YAAY,yBAAyB,OAAO;AAAA,IACzD,OAAO;AAAA,MACN,oBAAoB,CAAC,EAAE,WAAW,EAAE,aAAa,MAAM,GAAG,iBAAiB,MAAM;AAEhF,cAAM,kBAAkB,YAAY,WAAW,iBAAiB,KAAK,MAAM;AAC3E,cAAM,kBAAkB,YAAY,WAAW,iBAAiB,KAAK,MAAM;AAE3E,YAAI,MAAM,oBAAoB,OAAO;AACpC,2BAAiB;AAAA,YAChB,aAAa;AAAA,YACb,YAAY,CAAC,EAAE,WAAW,UAAU,MAAM;AACzC,qBAAO,EAAE,UAAU,EAAE,eAAe,OAAO,GAAG,GAAG,aAAa,UAAU,MAAM,mBAAmB,EAAE,EAAE;AAAA,YACtG;AAAA,YACA,mBAAmB,MAAM,EAAE,QAAQ;AAAA,UACpC,CAAC;AAAA,QACF;AAAA,MACD;AAAA,MACA,0BAA0B,CAAC,EAAE,WAAW,WAAW,MAAM;AAGxD,cAAM,EAAE,kBAAkB,EAAE,IAAI,UAAU;AAC1C,cAAM,gBAAgB,kBAAkB,UAAU,SAAS,EAAE,SAAS;AACtE,cAAM,UAAU,KAAK,IAAI,gBAAgB,SAAS,EAAE,QAAQ,cAAc,SAAS,EAAE,MAAM;AAC3F,YAAI,UAAU;AAAG,yBAAe,WAAW,UAAU,aAAa,GAAG,OAAO,IAAI;AAAA,MACjF;AAAA,IACD;AAAA,EACD;AACD;","names":[]}