---
import type { GetStaticPaths } from 'astro'
import Layout from '~/layouts/Layout.astro'
import { SeriesGroup, TagsGroup, getSortedPosts } from '~/utils'
import PostPreview from '~/components/PostPreview.astro'
import DividerText from '~/components/DividerText.astro'
import { getCollection, render, type CollectionEntry } from 'astro:content'
import PostAddendum from '~/components/PostAddendum.astro'
import TableOfContents from '~/components/TableOfContents.astro'
import { Image } from 'astro:assets'
import GiscusLoader from '~/components/GiscusLoader.astro'
import siteConfig from '~/site.config'
import Tags from '~/components/Tags.astro'
import PostInfo from '~/components/PostInfo.astro'
import ScrollUpButton from '~/components/ScrollUpButton.astro'
import type { Collation } from '~/types'
import ChevronsRight from '~/icons/chevrons-right.svg'
import { getPostSequenceContext } from '~/utils'

export const getStaticPaths = (async () => {
  const posts = await getSortedPosts()
  return posts.map((post) => {
    // Get sequence context for the post
    const { prev, next } = getPostSequenceContext(post, posts)
    return {
      params: { slug: post.id },
      props: { post, prev, next },
    }
  })
}) satisfies GetStaticPaths

const { post, prev, next } = Astro.props
const postData = post.data
const { headings, Content: PostContent } = await render(post)
const addendum = await getCollection('addendum')
let AddendumContent
let addendumAvatarImage
if (addendum.length > 0) {
  const addendumEntry = addendum[0]
  const { Content } = await render(addendumEntry)
  AddendumContent = Content
  addendumAvatarImage = addendumEntry.data.avatarImage
}

const sortedPosts = await getSortedPosts()

// Get series posts if this post is part of a series
let series: Collation<'posts'> | undefined
let nextPostInSeries: CollectionEntry<'posts'> | undefined
if (postData.series) {
  const seriesGroup = await SeriesGroup.build(sortedPosts)
  series = seriesGroup.match(postData.series)
  if (!series) {
    // This should not happen if series data is correct
    throw new Error(`Series "${postData.series}" not found`)
  }
  const sequenceContext = getPostSequenceContext(post, series.entries)
  nextPostInSeries = sequenceContext.next
}
const showSeries = series && series.entries.length > 1

let tags: Collation<'posts'>[] | undefined
if (postData.tags && postData.tags.length > 0) {
  const tagsGroup = await TagsGroup.build(sortedPosts)
  tags = tagsGroup.matchMany(postData.tags)
}
---

<Layout
  title={postData.title}
  description={postData.description}
  author={postData.author}
  tags={postData.tags}
>
  <article class="max-w-full py-7.5" data-pagefind-body>
    {
      postData.coverImage && (
        <Image
          priority
          layout="constrained"
          src={postData.coverImage.src}
          alt={postData.coverImage.alt}
          class="w-full rounded-xl mb-5"
        />
      )
    }
    <div class="md:mx-2">
      <h1 id={post.id} class="mb-4 text-[1.75rem] text-heading1 font-semibold">
        # {postData.title}
      </h1>
      <div class="my-2 border-l-2 border-accent/80 pl-4 py-2">
        <PostInfo post={post} class="mb-1" />
        {
          tags && (
            <div class="mt-4">
              <Tags tags={tags} />
            </div>
          )
        }
      </div>
    </div>
    <!-- <hr class="border-accent/10 border-2 rounded-xl hidden lg:block" /> -->
    <div class="flex flex-col xl:gap-4 2xl:gap-18 xl:flex-row xl:items-start">
      {postData.toc && headings.length > 0 && <TableOfContents headings={headings} />}
      <div class="mb-5 xl:min-w-full 2xl:min-w-full prose">
        <PostContent />
      </div>
    </div>
  </article>
  {
    nextPostInSeries && (
      <a
        href={`/posts/${nextPostInSeries.id}`}
        class="button justify-center -mt-8 mb-8 !whitespace-normal text-center flex gap-2 sm:gap-3 items-center"
      >
        <span>Next: {nextPostInSeries.data.title}</span>
        <ChevronsRight class="size-5 hidden sm:block" />
      </a>
    )
  }
  {
    AddendumContent && (
      <PostAddendum avatarImage={addendumAvatarImage}>
        <AddendumContent />
      </PostAddendum>
    )
  }
  {
    showSeries && series ? (
      <section>
        <DividerText text={`${series.title} Series`} />
        {series.entries.map((seriesPost) => (
          <PostPreview post={seriesPost} />
        ))}
      </section>
    ) : prev || next ? (
      <section>
        <DividerText text="More Posts" />
        {prev && <PostPreview post={prev} />}
        {next && <PostPreview post={next} />}
      </section>
    ) : null
  }
  {
    siteConfig.giscus && (
      <section>
        <DividerText text="Comments" />
        <GiscusLoader />
      </section>
    )
  }
  <ScrollUpButton />
</Layout>
