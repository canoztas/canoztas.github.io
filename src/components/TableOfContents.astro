---
import type { MarkdownHeading } from 'astro'
import TOCHeading from '~/components/TableOfContentsHeading.astro'

interface Props {
  headings: MarkdownHeading[]
}

const { headings } = Astro.props

const filteredHeadings = headings.filter(({ depth }) => depth >= 2 && depth <= 3)
---

<details
  open
  class="toc relative md:mx-2 xl:mx-0 text-foreground/90 bg-foreground/5 xl:bg-transparent px-8 xl:pr-2 py-6 mt-5 xl:mt-0 xl:w-full rounded-xl border-3 xl:border-none border-accent/10 xl:sticky xl:top-10 xl:basis-[266px] 2xl:basis-[340px] xl:order-2 xl:shrink-0"
>
  <summary
    class="list-none marker:hidden marker:content-[''] before:content-['>'] before:text-accent before:font-semibold before:absolute before:left-3 cursor-pointer"
    >Table of Contents</summary
  >
  <nav class="w-full text-sm">
    <ul class="mt-4 flex flex-col max-w-full">
      {filteredHeadings.map((heading) => <TOCHeading heading={heading} />)}
    </ul>
  </nav>
</details>

<script>
  const anchors = document.querySelectorAll('h2[id], h3[id]')
  const links = document.querySelectorAll('details.toc > nav > ul > li')
  if (anchors.length === links.length && anchors.length > 0) {
    window.addEventListener('scroll', (_event) => {
      let scrollTop = window.scrollY
      let highlighted = false
      // then iterate backwards, on the first match highlight it and break
      for (var i = anchors.length - 1; i >= 0; i--) {
        const anchor = anchors[i] as HTMLElement
        if (!highlighted && scrollTop > anchor.offsetTop - 75) {
          links[i].classList.add('active-heading')
          highlighted = true
        } else {
          links[i].classList.remove('active-heading')
        }
      }
    })
  }
</script>

<style>
  details[open] summary:before {
    transform: rotate(90deg);
  }
</style>
