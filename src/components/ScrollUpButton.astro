---
import IconChevronUp from '~/icons/chevron-up.svg'
---

<button
  hidden
  class="scroll-up size-11 fixed flex items-center justify-center bg-background z-100 bottom-3 right-3 rounded-full border-2 border-accent/20 hover:bg-accent/10 md:size-12 md:bottom-5 md:right-5 lg:size-13 lg:bottom-6 lg:right-6"
>
  <IconChevronUp class="text-accent/50 size-8 lg:size-9" />
</button>

<script>
  function transitionHiddenElement(
    element: HTMLElement,
    transitionProperty: string,
    transitionClass: string,
  ) {
    const listener = (e: TransitionEvent) => {
      if (e.target === element && e.propertyName === transitionProperty) {
        element.setAttribute('hidden', 'true')
        element.removeEventListener('transitionend', listener)
      }
    }
    return {
      show() {
        element.removeEventListener('transitionend', listener)
        element.removeAttribute('hidden')
        // Force a browser re-paint
        const _reflow = element.offsetHeight
        element.classList.add(transitionClass)
      },
      hide() {
        element.addEventListener('transitionend', listener)
        element.classList.remove(transitionClass)
      },
    }
  }

  function init() {
    const button = document.querySelector('button.scroll-up') as HTMLButtonElement
    const topHeading = document.querySelector('h1')
    const topOffset = topHeading ? topHeading.offsetTop : 0
    if (!button) {
      console.warn('Scroll up button not found in the document.')
      return
    }
    button.addEventListener('click', () => {
      window.scrollTo({ top: topOffset, behavior: 'smooth' })
    })
    // Use IntersectionObserver to show/hide the button
    const prose = document.querySelector('article div.prose')
    if (!prose) {
      console.warn('Prose element not found in the article.')
      return
    }

    const btnControl = transitionHiddenElement(button, 'opacity', 'active')

    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            btnControl.show()
          } else {
            btnControl.hide()
          }
        })
      },
      // Only consider the top 5% of the viewport
      { rootMargin: `0px 0px -95% 0px` },
    )
    observer.observe(prose)
  }

  init()
</script>

<style>
  /* When button appears, slide it in from the bottom */
  button.scroll-up {
    /* also add a translate effect */
    transform: translateY(0px);
    /* and a transition */
    opacity: 1;
    transition:
      transform 0.3s ease-in-out,
      opacity 0.5s cubic-bezier(0.4, 0, 0.2, 1),
      background-color 0.15s cubic-bezier(0.4, 0, 0.2, 1);
  }
  button.scroll-up:not(.active) {
    transform: translateY(10px);
    opacity: 0;
  }
</style>
